import pickle
import sys
from PyQt5.QtWidgets import (QWidget, QPushButton,
    QHBoxLayout, QVBoxLayout, QApplication, QLabel,
    QComboBox, QTextEdit, QLineEdit)
from PyQt5.QtCore import Qt


class ScoreDB(QWidget):

    def __init__(self):
        super().__init__()
        self.initUI()
        self.dbfilename = 'assignment6.dat'
        self.scoredb = []
        self.readScoreDB()
        self.showScoreDB()

    def initUI(self):

        baseLayout = QVBoxLayout()


        self.nameEdit = QLineEdit()
        self.ageEdit = QLineEdit()
        self. scoreEdit = QLineEdit()
        name = QLabel("Name:")
        score = QLabel("Score:")
        age = QLabel("Age:")

        first = QHBoxLayout()
        baseLayout.addLayout(first)
        first.addWidget(name)
        first.addWidget(self.nameEdit)
        first.addWidget(age)
        first.addWidget(self.ageEdit)
        first.addWidget(score)
        first.addWidget(self.scoreEdit)


        self.amountEdit = QLineEdit()
        self.combo = QComboBox()

        self.combo.addItem("Name")
        self.combo.addItem("Age")
        self.combo.addItem("Score")
        key = QLabel("Key:")
        amount = QLabel("Amount:")

        second = QHBoxLayout()
        baseLayout.addLayout(second)
        second.addStretch(1)
        second.addWidget(amount)
        second.addWidget(self.amountEdit)
        second.addWidget(key)
        second.addWidget(self.combo)


        self.btn_add = QPushButton("Add")
        self.btn_del = QPushButton("Del")
        self.btn_find = QPushButton("Find")
        self.btn_inc = QPushButton("Inc")
        self.btn_show = QPushButton("Show")

        self.btn_show.clicked.connect(self.showScoreDB)
        self.btn_add.clicked.connect(self.add)
        self.btn_del.clicked.connect(self.delete)
        self.btn_find.clicked.connect(self.find)
        self.btn_inc.clicked.connect(self.inc)

        third = QHBoxLayout()
        baseLayout.addLayout(third)
        third.addStretch(1)
        third.addWidget(self.btn_add)
        third.addWidget(self.btn_del)
        third.addWidget(self.btn_find)
        third.addWidget(self.btn_inc)
        third.addWidget(self.btn_show)


        result = QLabel("Result")
        self.resultEdit = QTextEdit()


        last = QVBoxLayout()
        baseLayout.addLayout(last)
        last.addWidget(result)
        last.addWidget(self.resultEdit)


        self.setLayout(baseLayout)

        self.setGeometry(300, 300, 500, 250)
        self.setWindowTitle('Assignment6')
        self.show()

    def closeEvent(self, event):
        self.writeScoreDB()

    def readScoreDB(self):
        try:
            fH = open(self.dbfilename, 'rb')
        except FileNotFoundError as e:
            self.scoredb = []
            return

        try:
            self.scoredb =  pickle.load(fH)
        except:
            pass
        else:
            pass
        fH.close()


    # write the data into person db
    def writeScoreDB(self):
        fH = open(self.dbfilename, 'wb')
        pickle.dump(self.scoredb, fH)
        fH.close()

    def showScoreDB(self):
        keyname = self.combo.currentText()
        msg = ""
        for p in sorted(self.scoredb, key =lambda  person:person[keyname]):
            for attr in sorted(p):
                msg += str(attr) + "=" + str(p[attr]) + " "
            msg +='\n'
        self.resultEdit.setPlainText(msg)

    def add(self):
        name = str(self.nameEdit.text())
        age = int(self.ageEdit.text())
        score = int(self.scoreEdit.text())
        record = {'Name':name,'Age':age,'Score':score}
        self.scoredb += [record]
        self.showScoreDB()

    def find(self):
        msg = ""
        for p in self.scoredb:
            if p['Name'] == self.nameEdit.text():
                msg += "Name:" + str(p['Name']) + " " + "Age:" + str(p['Age']) + " " + "Score:" + str(p['Score'])
                msg += '\n'
        self.resultEdit.setPlainText(msg)

    def delete(self):
        for i in range(len(self.scoredb)):
            for p in self.scoredb:
                if p['Name'] == self.nameEdit.text():
                    self.scoredb.remove(p)
        self.showScoreDB()

    def inc(self):
        add = int(self.amountEdit.text())
        for p in self.scoredb:
            if p['Name'] == self.nameEdit.text():
               p['Score'] = int(p['Score']) + add
        self.showScoreDB()



if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = ScoreDB()
    sys.exit(app.exec_())
